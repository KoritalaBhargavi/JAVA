CODING CHALLANGE:

1.Write a function that calculates the power of a number, given a base x and an exponent n, without using the built-in power operator ** or any power functions. The function should return x raised to the power n.

Input Format

A double representing the base. An integer representing the exponent, which can be positive, negative, or zero.

Constraints

-

Output Format

A double representing the result of x raised to the power n.

Sample Input 0

2
3
Sample Output 0

8
Sample Input 1

3
2
Sample Output 1
9

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int n=sc.nextInt();
        int res=1;
        for(int i=1;i<=n;i++){
            res=res*a;
        }
        System.out.println(res);
    }
}

2.Write a program to find the sum of an arithmetic sequence given the first term, common difference, and number of terms.

Description: An arithmetic sequence (or arithmetic progression) is a sequence of numbers in which the difference between any two consecutive terms is constant. The formula for the sum of the first 𝑛 terms of an arithmetic sequence is:

Sum = 𝑛/2 × (2𝑎 + (𝑛 − 1) × 𝑑) where:𝑎 is the first term of the sequence, 𝑑 is the common difference between consecutive terms, 𝑛 is the number of terms.

Input Format

An integer 𝑎, the first term of the sequence. An integer 𝑑, the common difference. An integer 𝑛, the number of terms.

Constraints

-

Output Format

A single integer representing the sum of the first 𝑛 terms in the arithmetic sequence.

Sample Input 0

2
3
5
Sample Output 0

40
Sample Input 1

10
-2
4
Sample Output 1

28

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int d=sc.nextInt();
        int n=sc.nextInt();
        int res=(n*(2*a+(n-1)*d))/2;
        System.out.println(res);
    }
}

3.Write a program to find the sum of the first 𝑛 n terms in a geometric progression (GP) given the first term, common ratio, and the number of terms.

Description: A geometric progression is a sequence of numbers in which each term after the first is found by multiplying the previous one by a fixed, non-zero number called the "common ratio." The formula for the sum of the first 𝑛 n terms of a geometric progression is:

Sum = 𝑎 × ((𝑟^n −1)/(𝑟−1))

where:

𝑎 is the first term, 𝑟 is the common ratio, 𝑛 is the number of terms. If r=1, then the sum of the progression is simply 𝑎×𝑛 because all terms are the same.

Input Format

An integer 𝑎: the first term of the progression. A floating-point or integer 𝑟: the common ratio. An integer 𝑛: the number of terms.

Constraints

-

Output Format

A single floating-point or integer value representing the sum of the first 𝑛 terms in the geometric progression.

Sample Input 0

2
3
4
Sample Output 0

80
Explanation 0

The sequence is 2, 6, 18, 54. The sum of these terms is 80.

Sample Input 1

5
2
3
Sample Output 1

35
Explanation 1

The sequence is 5, 10, 20. The sum of these terms is 35

Program:
import java.io.*;
import java.util.*;
import java.math.*;
public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int r=sc.nextInt();
        int n=sc.nextInt();
        int var1=a;
        int var2=0;
        for(int i=1;i<=n;i++){
            var1=var1*r;
            var2=var2+var1;
            //System.out.println(var1);
            //System.out.println();
            //System.out.println(var2);

        }
          System.out.println(var2/r);
    }
}

4.Write a program to calculate the square root of a given non-negative integer 𝑥 without using any built-in square root functions (like sqrt in Python or similar functions in other languages). The result should be the integer part of the square root, with any decimal part discarded. Given a non-negative integer 𝑥, the program should find the largest integer 𝑦 such that 𝑦*y≤𝑥. The output should be an integer.

Input Format

A non-negative integer 𝑥 (0 ≤ 𝑥 ≤ 10^6).

Constraints

-

Output Format

An integer representing the integer part of the square root of x

Sample Input 0

4
Sample Output 0

2

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        for(int i=1;;i++){
            if(i*i==a){
                System.out.println(i);
                return;
            }
        if(i*i>=a){
            System.out.println(i-1);
            return;
        }
        }
    }
}

5.Write a program to find the Greatest Common Divisor (GCD) of two given integers. The GCD of two integers is the largest integer that divides both of them without leaving a remainder. Your program should be efficient enough to handle large integers.

Input Format

Two integers a and b (1 ≤ a, b ≤ 10^9)

Constraints

The two integers are positive, and each integer can be as large as 1 billion.

Output Format

Output the GCD of the two integers.

Sample Input 0

17
31
Sample Output 0

1

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int min,gcd=1;
        if(a>b)
            min=b;
        else
            min=a;
        for (int i=2;i<min;i++){
            if(a%i==0&&b%i==0)
                gcd=i;
        }
        System.out.println(gcd);
    }
}

6.Write a program to find the LCM of two numbers. HINT: Use the relationship LCM(a, b) * GCD(a, b) = a * b.

Input Format

Two positive integers a and b (1 ≤ a, b ≤ 10^9)

Constraints

The two integers are positive, and each integer can be as large as 1 billion.

Output Format

Output the LCM of the two integers.

Sample Input 0

4
5
Sample Output 0

20

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int min,gcd=1;
        if(a>b)
            min=b;
        else
            min=a;
        for (int i=2;i<min;i++){
            if(a%i==0&&b%i==0)
                gcd=i;
        }
        System.out.println((a*b)/gcd);
    }
}