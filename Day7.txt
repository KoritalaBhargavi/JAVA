Empty loop:

EX:
for(;;);

CODING CHALLENGE

1.Write a program that calculates the sum of all natural numbers from 1 up to a given positive integer n.

Input Format

A single integer n , representing the upper limit of the sum.

Constraints

(1 ≤ n ≤ 10^7)

Output Format

Output a single integer, the sum of all natural numbers from 1 to n.

Sample Input 0

5
Sample Output 0

15
Sample Input 1

3
Sample Output 1

6

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int sum=(n*(n+1))/2;
        System.out.println(sum);
    }
}

2.Write a function that generates and prints the multiplication table for a given number n from 1 to 10.

Input Format

A positive integer n (the number for which the multiplication table is to be generated)

Constraints

-

Output Format

The multiplication table of n from 1 to 10 printed to the console.

Sample Input 0

7
Sample Output 0

7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
7 x 10 = 70
Sample Input 1

3
Sample Output 1

3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30

program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=1;i<=10;i++){
            System.out.println(n+" x "+i+" = "+(n*i));
        }
    }
}

3.Write a program to count the number of digits in a given integer.

Input Format

An integer n, which can be positive, negative, or zero

Constraints

-

Output Format

An integer representing the count of digits in n

Sample Input 0

12345
Sample Output 0

5
Sample Input 1

-456
Sample Output 1

3
Sample Input 2

0
Sample Output 2

1

4.Write a function to calculate the sum of the digits of a given non-negative integer. The function should take an integer n and return the sum of its digits.

Input Format

A non-negative integer n.

Constraints

(0 ≤ n ≤ 10^9)

Output Format

Return an integer representing the sum of the digits of n

Sample Input 0

12345
Sample Output 0

15
Sample Input 1

1000
Sample Output 1

1

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int rem;
        int sum=0;
        while(n!=0){
            rem=n%10;
            sum+=rem;
            n/=10;
        }
        System.out.println(sum);
    }
}

5.Write a function that takes an integer n and repeatedly sums its digits until the result has only one digit. This final single-digit result is known as the digital root of the number.

Input Format

A single integer n

Constraints

-

Output Format

An integer representing the digital root of n.

Sample Input 0

9875
Sample Output 0

2
Explanation 0

9 + 8 + 7 + 5 = 29 2 + 9 = 11 1 + 1 = 2

Sample Input 1

49
Sample Output 1

4
Explanation 1

4 + 9 = 13 1 + 3 = 4

Program:
import java.io.*;
import java.util.*;

public class Solution {
    public static int sum(int n){
        int rem;
        int sum=0;
        while(n>0){
            rem=n%10;
            sum+=rem;
            n/=10;
        }
        return sum;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int res=sum(n);
        while(res>9){
            res=sum(res);
        }
        System.out.println(res);
    }
}

6.Write a function that determines whether a given integer is a prime number. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself.

Input Format

A single integer n (1 ≤ n ≤ 10^9)

Constraints

1 ≤ n ≤ 10^9

Output Format

Return True if n is a prime number, and False otherwise.

Sample Input 0

6
Sample Output 0

False
Sample Input 1

5
Sample Output 1

True


Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int isprime=0;
        if(n<2){
            System.out.println("False");
        }
        for (int i=2;i<=Math.sqrt(n);i++){
            if(n%i==0){
                System.out.println("False");
                isprime=1;
                break;
            }
        }
        if(isprime == 0)
            System.out.println("True");
    }
} 

    
